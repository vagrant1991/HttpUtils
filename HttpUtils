package com.example.yueyundong1.util;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import android.graphics.Bitmap;


/** 通过HttpURLConnection和HttpClient访问网络,获得响应数据,具体用法参考方法注释
 * @author vagrant QQ:513302092
 * @date 创建时间: 2015年4月25日
 */
public class HttpUtils {

	private static JSONObject jsonResult;
	private static String contentAsString = "";
	private static String postContent = "";
	
	public static String getResult(String path) {
		HttpURLConnection conn;
		try {
			URL url = new URL(path);
			conn = (HttpURLConnection) url.openConnection();
			conn.setConnectTimeout(15000);
			conn.setReadTimeout(10000);
			conn.setRequestMethod("GET");
			conn.setDoInput(true);
			conn.connect();
			int responseCode = conn.getResponseCode();
			if (responseCode == 200) 
				contentAsString = changeInputStream(conn.getInputStream());
			conn.disconnect();	
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return contentAsString;
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得数据,以字符串形式返回
	 * @param path 服务器地址和参数对构成字符串，如：url + "?" + params;
	 * @return string形式的返回数据
	 */
	public static String getWithHttpURLConnection(String path) {
		return getResult(path);
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得数据,以字符串形式返回
	 * @param api 服务器地址
	 * @param params id=1&name=2 形式参数
	 * @return string形式的返回数据
	 */
	public static String getWithHttpURLConnection(String api, String params) {
		String path = attachHttpGetParam(api, params);
		return getResult(path);
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得数据,传递单个键值对，以字符串形式返回
	 * @param api 服务器api地址
	 * @param key key值
	 * @param value value值
	 * @return string形式的返回数据
	 */
	public static String getWithHttpURLConnection(String api, String key, String value) {
		String path = attachHttpGetParam(api, key, value);
		return getResult(path);
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得数据,以字符串形式返回
	 * @param api 服务器api地址
	 * @param params List<BasicNameValuePair>形式传递的参数对
	 * @return string形式的返回数据
	 */
	public static String getWithHttpURLConnection(String api, List<BasicNameValuePair> params) {
		String path = attachHttpGetParams(api, params);
		return getResult(path);
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得数据,以字符串形式返回
	 * @param api 服务器api地址
	 * @param params Map<String, String>形式的参数对
	 * @return string形式的返回数据
	 */
	public static String getWithHttpURLConnection(String api, Map<String, String> params) {
		String path = attacHttpGetParams(api, params);
		return getResult(path);
	}
	
	public static String getHttpClientResult(String path) {
		HttpGet getMethod = new HttpGet(path);
		HttpClient httpClient = new DefaultHttpClient();
		try {
			HttpResponse response = httpClient.execute(getMethod);
			if (response.getStatusLine().getStatusCode() == 200) {
				contentAsString = EntityUtils.toString(response.getEntity(), "utf-8");
				return contentAsString;
			}
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return contentAsString;
	}
	/**
	 * 以get方式通过HttpClient从服务器获得数据,以字符串形式返回
	 * @param path 服务器地址和参数对构成字符串，如：url + "?" + params;
	 * @return string类型返回数据
	 */
	public static String getWithHttpClient(String path) {
		return getHttpClientResult(path);
	}
	/**
	 *  以get方式通过HttpClient从服务器获得数据,以字符串形式返回
	 * @param api 服务器地址
	 * @param params id=1&name=2 形式参数
	 * @return string类型返回数据
	 */
	public static String getWithHttpClient(String api, String params) {
		String path = attachHttpGetParam(api, params);
		return getHttpClientResult(path);
	}
	/**
	 * 以get方式通过HttpClient从服务器获得数据,以字符串形式返回
	 * @param api 服务器api地址
	 * @param key key值
	 * @param value value值
	 * @return string类型返回数据
	 */
	public static String getWithHttpClient(String api, String key, String value) {
		String path = attachHttpGetParam(api, key, value);
		return getHttpClientResult(path);
	}
	/**
	 * 以get方式通过HttpClient从服务器获得数据,以字符串形式返回
	 * @param api 服务器api地址
	 * @param params List<BasicNameValuePair>形式传递的参数对
	 * @return string类型返回数据
	 */
	public static String getWithHttpClient(String api, List<BasicNameValuePair> params) {
		String path = attachHttpGetParams(api, params);
		return getHttpClientResult(path);
	}
	/**
	 * 以get方式通过HttpClient从服务器获得数据,以字符串形式返回
	 * @param api 服务器api地址
	 * @param params Map<String, String>形式传递的参数对
	 * @return string类型返回数据
	 */
	public static String getWithHttpClient(String api, Map<String, String> params) {
		String path = attacHttpGetParams(api, params);
		return getHttpClientResult(path);
	}
	public static String postResult(String baseUrl,String postContent) {
		try {
			URL url = new URL(baseUrl);
			HttpURLConnection httpConn = (HttpURLConnection) url
					.openConnection();
			httpConn.setConnectTimeout(15000);
			httpConn.setReadTimeout(10000);
			httpConn.setDoInput(true);
			httpConn.setDoOutput(true);
			httpConn.setRequestMethod("POST");
			httpConn.setUseCaches(false);
			httpConn.connect();
			OutputStream os = httpConn.getOutputStream();
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
					os));
			writer.write(postContent);
			writer.flush();
			writer.close();
			os.close();
			int response = httpConn.getResponseCode();
			if (response == HttpURLConnection.HTTP_OK) {
				InputStream is = httpConn.getInputStream();
				contentAsString = changeInputStream(is);
				return contentAsString;
			}
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return contentAsString;
	}
	/**
	 * 以post方式通过HttpURLConnection向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param postContent 字符串格式表示的传递参数对
	 * @return string类型返回数据
	 */
	public static String postDataWithHttpURLConnection(String baseUrl,
			String postContent) {
		return postResult(baseUrl, postContent);
	}
	/**
	 * 以post方式通过HttpURLConnection向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param key key值
	 * @param value value值
	 * @return string类型返回数据
	 */
	public static String postDataWithHttpURLConnection(String baseUrl, String key, String value) {
		postContent = attachKeyAndVlaue(key, value);
		return postResult(baseUrl, postContent);
	}
	/**
	 * 以post方式通过HttpURLConnection向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param params List<BasicNameValuePair>表示的传递字段
	 * @return string类型返回数据
	 */
	public static String postDataWithHttpURLConnection(String baseUrl,
			List<BasicNameValuePair> params) {
		postContent = URLEncodedUtils.format(params, "utf-8");
		return postResult(baseUrl, postContent);
	}
	/**
	 * 以post方式通过HttpURLConnection向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param params Map形式的传递字段
	 * @return string类型返回数据
	 */
	public static String postDataWithHttpURLConnection(String baseUrl, Map<String, String> params) {
		postContent = transMapToString(params);
		return postResult(baseUrl, postContent);
	}
	
	public static String postHttpClientResult(String baseUrl, String postContent) {
		HttpPost postMethod = new HttpPost(baseUrl);
		HttpClient httpClient = new DefaultHttpClient();
		try {
			StringEntity entity = new StringEntity(postContent, HTTP.UTF_8);
			entity.setContentType("application/x-www-form-urlencoded");
			postMethod.setEntity(entity);
			HttpResponse response = httpClient.execute(postMethod);
			if (response.getStatusLine().getStatusCode() == 200) {
				try {
					return EntityUtils.toString(response.getEntity(), "utf-8");
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (ClientProtocolException e1) {
			e1.printStackTrace();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		return contentAsString;
	}
	/**
	 *  以post方式通过HttpClient向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param postContent string形式表示的参数对
	 * @return string形式的返回数据
	 */
	public static String postDataWithHttpClient(String baseUrl,
			String postContent) {
		return postHttpClientResult(baseUrl, postContent);
	}
	/**
	 * 以post方式通过HttpClient向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param key key值
	 * @param value value值
	 * @return string形式的返回数据
	 */
	public static String postDataWithHttpClient(String baseUrl, String key, String value) {
		postContent = attachKeyAndVlaue(key, value);
		return postHttpClientResult(baseUrl, postContent);
	}
	/**
	 * 以post方式通过HttpClient向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param params List<BasicNameValuePair>形式表示的参数对
	 * @return string形式的返回数据
	 */
	public static String postDataWithHttpClient(String baseUrl,
			List<BasicNameValuePair> params) {
		postContent = URLEncodedUtils.format(params, "utf-8");
		return postHttpClientResult(baseUrl, postContent);
	}
	/**
	 * 以post方式通过HttpClient向服务器传递数据
	 * @param baseUrl 服务器地址
	 * @param params Map<String, String>表示的参数对
	 * @return string形式的返回数据
	 */
	public static String postDataWithHttpClient(String baseUrl,
			Map<String, String> params) {
		postContent = transMapToString(params);
		return postHttpClientResult(baseUrl, postContent);
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得JSON格式数据
	 * @param path 服务器api地址  + "?" + params参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpURLConnection(String path) {
		try {
			jsonResult = new JSONObject(getWithHttpURLConnection(path));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得JSON格式数据
	 * @param api 服务器api地址 
	 * @param params id=1&name=2参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpURLConnection(String api, String params) {
		try {
			jsonResult = new JSONObject(getWithHttpURLConnection(api, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得JSON格式数据
	 * @param api 服务器api地址 
	 * @param key key值
	 * @param value value值
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpURLConnection(String api, String key, String value) {
		try {
			jsonResult = new JSONObject(getWithHttpURLConnection(api, key, value));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得JSON格式数据
	 * @param api 服务器api地址 
	 * @param params List<BasicNameValuePair>表示参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpURLConnection(String api, List<BasicNameValuePair> params) {
		try {
			jsonResult = new JSONObject(getWithHttpURLConnection(api, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以get方式通过HttpURLConnection从服务器获得JSON格式数据
	 * @param api 服务器api地址 
	 * @param params Map<String, String>格式参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpURLConnection(String api, Map<String, String> params) {
		try {
			jsonResult = new JSONObject(getWithHttpURLConnection(api, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	
	/**
	 * 以get方式通过HttpClient从服务器获得JSON格式数据
	 * @param path 服务器api地址  + "?" + params参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpClient(String path) {
		try {
			jsonResult = new JSONObject(getWithHttpClient(path));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以get方式通过HttpClient从服务器获得JSON格式数据
	 * @param api 服务器api地址 
	 * @param params id=1&name=nick类型参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpClient(String api, String params) {
		try {
			jsonResult = new JSONObject(getWithHttpClient(api, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以get方式通过HttpClient从服务器获得JSON格式数据
	 * @param api 服务器api地址
	 * @param key key值
	 * @param value value值
	 * @return
	 */
	public static JSONObject getJsonWithHttpClient(String api, String key, String value) {
		try {
			jsonResult = new JSONObject(getWithHttpClient(api, key, value));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 *  以get方式通过HttpClient从服务器获得JSON格式数据
	 * @param api 服务器api地址
	 * @param params List<BasicNameValuePair>表示参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpClient(String api, List<BasicNameValuePair> params) {
		try {
			jsonResult = new JSONObject(getWithHttpClient(api, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以get方式通过HttpClient从服务器获得JSON格式数据
	 * @param api 服务器api地址
	 * @param params Map<String, String>表示参数对
	 * @return JSONObject格式数据
	 */
	public static JSONObject getJsonWithHttpClient(String api, Map<String, String> params) {
		try {
			jsonResult = new JSONObject(getWithHttpClient(api, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以post形式通过HttpURLConnection向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param postContent 字符串形式表示的传递的参数对
	 * @return JSONObject表示返回数据
	 */
	public static JSONObject jsonPostWithHttpURLConnection(String baseUrl, String postContent) {
		try {
			jsonResult = new JSONObject(postDataWithHttpURLConnection(baseUrl, postContent));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以post形式通过HttpURLConnection向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param key key值
	 * @param value value值
	 * @return
	 */
	public static JSONObject  jsonPostWithHttpURLConnection(String baseUrl, String key, String value) {
		try {
			jsonResult = new JSONObject(postDataWithHttpURLConnection(baseUrl, key, value));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以post形式通过HttpURLConnection向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param params List<BasicNameValuePair>形式表示的传递的参数对
	 * @return JSONObject表示返回数据
	 */
	public static JSONObject jsonPostWithHttpURLConnection(String baseUrl, List<BasicNameValuePair> params) {
		try {
			jsonResult = new JSONObject(postDataWithHttpURLConnection(baseUrl, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以post形式通过HttpURLConnection向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param params Map<String, String>形式表示的传递的参数对
	 * @return JSONObject表示返回数据
	 */
	public static JSONObject jsonPostWithHttpURLConnection(String baseUrl, Map<String, String> params) {
		try {
			jsonResult = new JSONObject(postDataWithHttpURLConnection(baseUrl, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	
	/**
	 * 以post形式通过HttpClientn向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param postContent 字符串形式表示的传递的参数对
	 * @return JSONObject表示返回数据
	 */
	public static JSONObject jsonPostWithHttpClient(String baseUrl, String postContent) {
		try {
			jsonResult = new JSONObject(postDataWithHttpClient(baseUrl, postContent));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以post形式通过HttpClientn向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param key key值
	 * @param value value值
	 * @return JSONObject表示返回数据
	 */
	public static JSONObject jsonPostWithHttpClient(String baseUrl, String key, String value) {
		try {
			jsonResult = new JSONObject(postDataWithHttpClient(baseUrl, key, value));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以post形式通过HttpClient向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param params List<BasicNameValuePair>形式表示的传递的参数对
	 * @return JSONObject表示返回数据
	 */
	public static JSONObject jsonPostWithHttpClient(String baseUrl, List<BasicNameValuePair> params) {
		try {
			jsonResult = new JSONObject(postDataWithHttpClient(baseUrl, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 以post形式通过HttpClient向服务器传递数据,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param params Map<String, String>形式表示的传递的参数对
	 * @return JSONObject表示返回数据
	 */
	public static JSONObject jsonPostWithHttpClient(String baseUrl, Map<String, String> params) {
		try {
			jsonResult = new JSONObject(postDataWithHttpClient(baseUrl, params));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	
	/**
	 * 通过HttpURLConnection向服务器上传文件
	 * @param baseUrl 服务器地址
	 * @param file 文件
	 * @return string格式返回数据
	 */
	public static String uploadFileWithHttpURLConnection(String baseUrl, File file) {
		String lineEnd = "\r\n"; 
		String twoHypens = "--";
		String boundary = UUID.randomUUID().toString();
		int byteRead, byteAvailable, bufferSize;
		byte[] buffer;
		int maxBufferSize = 4 * 1024 * 1024;
		try {
			InputStream in = new FileInputStream(file);
			URL url = new URL(baseUrl);
			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();
			connection.setDoInput(true);
			connection.setDoOutput(true);
			connection.setUseCaches(false);
			connection.setConnectTimeout(TIME_OUT);
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Connection", "Keep-Alive");
			connection.setRequestProperty("Content-Type",
					"multipart/form-data;boundary=" + boundary);

			DataOutputStream outputStream = new DataOutputStream(
					connection.getOutputStream());
			outputStream.writeBytes(twoHypens + boundary + lineEnd);
			outputStream
					.writeBytes("Content-Disposition: form-data; name=\"file\";filename=\"filename\""
							+ lineEnd);
			outputStream.writeBytes(lineEnd);

			byteAvailable = in.available();
			bufferSize = Math.min(byteAvailable, maxBufferSize);
			buffer = new byte[bufferSize];
			
			byteRead = in.read(buffer, 0, bufferSize);
			while (byteRead > 0) {
				outputStream.write(buffer, 0, bufferSize);
				byteAvailable = in.available();
				bufferSize = Math.min(byteAvailable, maxBufferSize);
				byteRead = in.read(buffer, 0, bufferSize);
			}
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(twoHypens + boundary + twoHypens + lineEnd);
			InputStream inputStream = connection.getInputStream();
			in.close();
			outputStream.flush();
			outputStream.close();
			if (connection.getResponseCode() == HttpStatus.SC_OK)
				return changeInputStream(inputStream);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "";
	}
	/**
	 * 通过HttpURLConnection向服务器上传文件,返回json数据
	 * @param baseUrl 服务器地址
	 * @param file 文件
	 * @return JSONObject格式返回数据
	 */
	public static JSONObject jsonUploadFileWithHttpURLConnection(String baseUrl, File file) {
		try {
			jsonResult = new JSONObject(uploadFileWithHttpURLConnection(baseUrl, file));
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 通过HttpURLConnection向服务器上传文件， 并附带参数
	 * @param baseUrl 服务器地址
	 * @param file 文件
	 * @param key 参数key值
	 * @param value 参数值
	 * @return string格式返回数据
	 */
	public static String uploadFileWithHttURLCoonection(String baseUrl,
			File file, String key, String value) {
		String lineEnd = "\r\n"; 
		String twoHypens = "--";
		String boundary = UUID.randomUUID().toString();
		int byteRead, byteAvailable, bufferSize;
		byte[] buffer;
		int maxBufferSize = 4 * 1024 * 1024;
		try {
			InputStream in = new FileInputStream(file);
			URL url = new URL(baseUrl);
			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();
			connection.setDoInput(true);
			connection.setDoOutput(true);
			connection.setUseCaches(false);
			connection.setConnectTimeout(TIME_OUT);
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Connection", "Keep-Alive");
			connection.setRequestProperty("Content-Type",
					"multipart/form-data;boundary=" + boundary);

			DataOutputStream outputStream = new DataOutputStream(
					connection.getOutputStream());
			outputStream.writeBytes(twoHypens + boundary + lineEnd);
			outputStream.writeBytes("Content-Disposition: form-data; name="
					+ key + lineEnd);
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(value);
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(twoHypens + boundary + lineEnd);
			outputStream
					.writeBytes("Content-Disposition: form-data; name=\"file\";filename=\"filename\""
							+ lineEnd);
			outputStream.writeBytes(lineEnd);

			byteAvailable = in.available();
			bufferSize = Math.min(byteAvailable, maxBufferSize);
			buffer = new byte[bufferSize];
			
			byteRead = in.read(buffer, 0, bufferSize);
			while (byteRead > 0) {
				outputStream.write(buffer, 0, bufferSize);
				byteAvailable = in.available();
				bufferSize = Math.min(byteAvailable, maxBufferSize);
				byteRead = in.read(buffer, 0, bufferSize);
			}
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(twoHypens + boundary + twoHypens + lineEnd);
			InputStream inputStream = connection.getInputStream();
			in.close();
			outputStream.flush();
			outputStream.close();
			if (connection.getResponseCode() == HttpStatus.SC_OK)
				return changeInputStream(inputStream);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "";
	}
	/**
	 * 通过HttpURLConnection向服务器上传文件， 并附带参数，返回json数据
	 * @param baseUrl 服务器地址
	 * @param file 文件
	 * @param key key值
	 * @param value value值
	 * @return JSONObject格式返回数据
	 */
	public static JSONObject jsonUploadFileWithHttURLCoonection(String baseUrl,
			File file, String key, String value)  {
		try {
			jsonResult = new JSONObject(uploadFileWithHttURLCoonection(baseUrl, file, key, value));
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	private static final int TIME_OUT = 10 * 1000; // 超时时间
	/**
	 * 通过HttpURLConnection向服务器上传图片,附带参数
	 * @param baseUrl  服务器地址
	 * @param bitmap Bitmap文件
	 * @param key 参数key值
	 * @param value 参数值
	 * @return string格式返回数据
	 */
	public static String uploadBitmapWithHttpURLConnection(String baseUrl,
			Bitmap bitmap, String key, String value) {
		String lineEnd = "\r\n"; 
		String twoHypens = "--";
		String boundary = UUID.randomUUID().toString();
		int byteRead, byteAvailable, bufferSize;
		byte[] buffer;
		int maxBufferSize = 4 * 1024 * 1024;
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
			ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
					baos.toByteArray());
			URL url = new URL(baseUrl);
			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();
			connection.setDoInput(true);
			connection.setDoOutput(true);
			connection.setUseCaches(false);
			connection.setConnectTimeout(TIME_OUT);
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Connection", "Keep-Alive");
			connection.setRequestProperty("Content-Type",
					"multipart/form-data;boundary=" + boundary);

			DataOutputStream outputStream = new DataOutputStream(
					connection.getOutputStream());
			outputStream.writeBytes(twoHypens + boundary + lineEnd);
			outputStream.writeBytes("Content-Disposition: form-data; name="
					+ key + lineEnd);
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(value);
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(twoHypens + boundary + lineEnd);
			outputStream
					.writeBytes("Content-Disposition: form-data; name=\"image\";filename=\"image.jpg\""
							+ lineEnd);
			outputStream.writeBytes(lineEnd);

			byteAvailable = byteArrayInputStream.available();
			bufferSize = Math.min(byteAvailable, maxBufferSize);
			buffer = new byte[bufferSize];
			
			byteRead = byteArrayInputStream.read(buffer, 0, bufferSize);
			while (byteRead > 0) {
				outputStream.write(buffer, 0, bufferSize);
				byteAvailable = byteArrayInputStream.available();
				bufferSize = Math.min(byteAvailable, maxBufferSize);
				byteRead = byteArrayInputStream.read(buffer, 0, bufferSize);
			}
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(twoHypens + boundary + twoHypens + lineEnd);
			InputStream inputStream = connection.getInputStream();
			byteArrayInputStream.close();
			outputStream.flush();
			outputStream.close();
			if (connection.getResponseCode() == HttpStatus.SC_OK)
				return changeInputStream(inputStream);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "";
	}
	
	public static String uploadBitmapWithHttpURLConnection(String baseUrl,
			Bitmap bitmap) {
		String lineEnd = "\r\n"; 
		String twoHypens = "--";
		String boundary = UUID.randomUUID().toString();
		int byteRead, byteAvailable, bufferSize;
		byte[] buffer;
		int maxBufferSize = 4 * 1024 * 1024;
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
			ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(
					baos.toByteArray());
			URL url = new URL(baseUrl);
			HttpURLConnection connection = (HttpURLConnection) url
					.openConnection();
			connection.setDoInput(true);
			connection.setDoOutput(true);
			connection.setUseCaches(false);
			connection.setConnectTimeout(TIME_OUT);
			connection.setRequestMethod("POST");
			connection.setRequestProperty("Connection", "Keep-Alive");
			connection.setRequestProperty("Content-Type",
					"multipart/form-data;boundary=" + boundary);

			DataOutputStream outputStream = new DataOutputStream(
					connection.getOutputStream());
			
			outputStream.writeBytes(twoHypens + boundary + lineEnd);
			outputStream
					.writeBytes("Content-Disposition: form-data; name=\"image\";filename=\"image.jpg\""
							+ lineEnd);
			outputStream.writeBytes(lineEnd);

			byteAvailable = byteArrayInputStream.available();
			bufferSize = Math.min(byteAvailable, maxBufferSize);
			buffer = new byte[bufferSize];
			
			byteRead = byteArrayInputStream.read(buffer, 0, bufferSize);
			while (byteRead > 0) {
				outputStream.write(buffer, 0, bufferSize);
				byteAvailable = byteArrayInputStream.available();
				bufferSize = Math.min(byteAvailable, maxBufferSize);
				byteRead = byteArrayInputStream.read(buffer, 0, bufferSize);
			}
			outputStream.writeBytes(lineEnd);
			outputStream.writeBytes(twoHypens + boundary + twoHypens + lineEnd);
			InputStream inputStream = connection.getInputStream();
			byteArrayInputStream.close();
			outputStream.flush();
			outputStream.close();
			if (connection.getResponseCode() == HttpStatus.SC_OK)
				return changeInputStream(inputStream);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return "";
	}
	

	/**
	 * 通过HttpURLConnection向服务器上传图片,附带参数,返回json格式数据
	 * @param baseUrl  服务器地址
	 * @param bitmap Bitmap文件
	 * @param key 参数key值
	 * @param value 参数值
	 * @return JSONObject格式返回数据
	 */
	public static JSONObject jsonUploadBitmapWithHttpURLConnection(String baseUrl,
			Bitmap bitmap, String key, String value) {
		try {
			jsonResult = new JSONObject(uploadBitmapWithHttpURLConnection(baseUrl, bitmap, key, value));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}
	/**
	 * 通过HttpURLConnection向服务器上传图片,返回json格式数据
	 * @param baseUrl 服务器地址
	 * @param bitmap Bitmap文件
	 * @return JSONObject格式返回数据
	 */
	public static JSONObject jsonUploadBitmapWithHttpURLConnection(String baseUrl,
			Bitmap bitmap) {
		try {
			jsonResult = new JSONObject(uploadBitmapWithHttpURLConnection(baseUrl, bitmap));
			return jsonResult;
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return jsonResult;
	}	
	/**
	 * 通过HttpClient向服务器上传文件 TODO, 实现方法需要引入httpmime包，构造MultipartyEntity对象通过相应setEntity实现
	 * 具体细节stackoverflow 或 google . httpclient upload / httpclient multiparty 
	 * 不建议使用此种方式,会增大程序包
	 * @param baseUrl 服务器地址
	 * @param file 文件对象
	 * @return 返回数据
	 */
	public static String uploadFileWithHttpClient(String baseUrl, File file) {
		return null;
	}
	/**
	 @see #uploadFileWithHttpClient(String baseUrl, File file)
	 */
	public static String uploadFileWithHttpClient(String baseUrl, File file,
			String key, String value) {
		return null;
	}
	/**
	 @see #uploadFileWithHttpClient(String baseUrl, File file)
	 */
	public static String uploadBitmapWithHttpClient(String baseUrl, Bitmap bitmap) {
		return null;
	}
	/**
	 @see #uploadFileWithHttpClient(String baseUrl, File file)
	 */
	public static String uploadBtimapWithHttpClient(String baseUrl, Bitmap bitmap,
			String key, String value) {
		return null;
	}
	/**
	 * 转换Map<String, String>为string
	 * @param Map<String, String> 参数
	 * @return 转换后的String数据
	 */
	public static String transMapToString(Map<String, String> map) {
		Entry<String, String> entry;
		StringBuilder sb = new StringBuilder();
		for (Iterator<Entry<String, String>> iterator = map.entrySet().iterator(); iterator.hasNext();) {
			entry = iterator.next();
			 sb.append(entry.getKey().toString()).append( "=" ).append(null==entry.getValue()?"":  
			      entry.getValue().toString()).append (iterator.hasNext() ? "&" : ""); 
		}
		return sb.toString();
	}
	/**
	 * 转换inputstream为string
	 * @param inputStream
	 * @return inputstream转换为string后的内容
	 */
	public static String changeInputStream(InputStream inputStream) {
		BufferedReader reader = null;
		String contentAsString = "";
		try {
			reader = new BufferedReader(new InputStreamReader(inputStream));
			StringBuffer buffer = new StringBuffer();
			String line = "";
			while ((line = reader.readLine()) != null) {
				buffer.append(line);
			}
			return buffer.toString();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return contentAsString;
	}

	
	private static final String CHARSET_NAME = "UTF-8";

	public static String formatParams(List<BasicNameValuePair> params) {
		return URLEncodedUtils.format(params, CHARSET_NAME);
	}
	public static String attacHttpGetParams(String url, Map<String, String> params) {
		return attachHttpGetParam(url, transMapToString(params));
	}
	public static String attachHttpGetParams(String url,
			List<BasicNameValuePair> params) {
		return url + "?" + formatParams(params);
	}
	public static String attachHttpGetParam(String url, String params) {
		return url + "?" + params;
	}
	public static String attachHttpGetParam(String url, String name,
			String value) {
		return url + "?" + name + "=" + value;
	}
	public static String attachKeyAndVlaue(String key, String value) {
		return key + "=" + value;
	}
}
