package com.example.yueyundong1.util;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.widget.ImageView;
import android.widget.ImageView.ScaleType;
import android.widget.Toast;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkResponse;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.Request.Method;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.Response.ErrorListener;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.HttpHeaderParser;
import com.android.volley.toolbox.HurlStack;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.ImageLoader.ImageContainer;
import com.android.volley.toolbox.ImageLoader.ImageListener;
import com.android.volley.toolbox.ImageRequest;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.NetworkImageView;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.google.gson.Gson;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.OkUrlFactory;

/**
 * Volley工具类,使用Volley访问网络，封装了各种常用功能，具体查看方法注释 需添加网络连接权限：<uses-permission
 * android:name="android.permission.INTERNET" />
 * 使用GsonRequest需要引入Gson包，可替换为fastgson, 替换volley底层网络层需要引入okhttp,okhttp-urlconnection, 可maven,google最新版本
 * @author vagrant QQ:513302092
 * @date 创建时间: 2015年4月4日
 */
public class VolleyManager {
	// 请求队列
	private RequestQueue mQueue;
	// string类型请求
	private StringRequest stringRequest;
	// 返回结果为JSONObject类型的请求
	private JsonObjectRequest jsonObjectRequest;
	// 返回结果为JSONArray类型的请求
	private JsonArrayRequest jsonArrayRequest;
	// 自定义Xml请求
	private XMLRequest xmlRequest;
	// 返回结果为Bitmap类型的请求
	private ImageRequest imageRequest;
	// 用于图片加载的ImageLoader对象
	private ImageLoader imageLoader;
	// ImageListener对象
	private ImageListener imageListener;
	// URL完整路径
	private String path;
	// Context对象,可传递activity.this，用来创建全局RequestQueue对象,管理请求的生命周期
	private Context context;
	// post参数
	private String postContent;
	// 单例
	private static VolleyManager mInstance;
	// 默认显示网络错误提示
	private static boolean isShowNetworkErrorToast = true;

	private VolleyManager(Context context) {
		this.context = context;
		mQueue = getRequestQueue();
	}

	public static synchronized VolleyManager getInstance(Context context) {
		if (mInstance == null) {
			mInstance = new VolleyManager(context);
		}
		return mInstance;
	}

	public RequestQueue getRequestQueue() {
		if (mQueue == null) {
			//使用默认配置,参见volley源码： https://github.com/mcxiaoke/android-volley/blob/master/src/main/java/com/android/volley/toolbox/Volley.java
			mQueue = Volley.newRequestQueue(context.getApplicationContext());
			// 使用OKHttp作为volley网络传输层, android 4.4 HttpUrlConnection采用了Okhttp实现，okhttp具有更好的特性
			//mQueue = Volley.newRequestQueue(context.getApplicationContext(), new OkHttpStack());
		}
		return mQueue;
	}

	public ImageLoader getImageLoader() {
		if (imageLoader == null) {
			imageLoader = new ImageLoader(mQueue, new VolleyImageCache());
		}
		return imageLoader;
	}

	public <T> void addToRequestQueue(Request<T> req) {
		getRequestQueue().add(req);
	}

	public void cancelRequest(Context context) {
		mQueue.cancelAll(context);
	}

	public void stopRequestQueue() {
		mQueue.stop();
	}

	public File getCacheDir() {
		File cacheDir = new File(context.getCacheDir(), "volley");
		return cacheDir;
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,不传递参数，调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param url
	 *            完整服务器地址,包含参数对 如www.example.com?id=1&name=jack
	 * @param listener
	 *            响应成功回调
	 */
	public void getWithVolley(String url, Response.Listener<String> listener) {
		stringRequest = new StringRequest(url, listener, new MyErrorListener());
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param api
	 *            服务器地址,不包含参数对 如www.example.com
	 * @param postContent
	 *            id=1&id=2&id=3形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void getWithVolley(String api, String postContent,
			Response.Listener<String> listener) {
		path = attachHttpGetParam(api, postContent);
		getWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param api
	 *            服务器api地址，不包含参数对 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param listener
	 *            响应成功回调
	 */
	public void getWithVolley(String api, String name, String value,
			Response.Listener<String> listener) {
		path = attachHttpGetParam(api, name, value);
		getWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param api
	 *            服务器api地址，不包含参数对 如www.example.com
	 * @param params
	 *            List<BasicNameValuePair>形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void getWithVolley(String api, List<BasicNameValuePair> params,
			Response.Listener<String> listener) {
		path = attachHttpGetParams(api, params);
		getWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param api
	 *            服务器api地址，不包含参数对 如www.example.com
	 * @param params
	 *            Map<String, String>形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void getWithVolley(String api, Map<String, String> params,
			Response.Listener<String> listener) {
		path = attacHttpGetParams(api, params);
		getWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应，异步执行,调用相应回调接口返回结果，响应成功结果类型为String 参考volley
	 * github上Request类源码
	 * ：https://github.com/mcxiaoke/android-volley/blob/master/src
	 * /main/java/com/android/volley/Request.java 传递Map<String,
	 * String>类型参数需重写getParmas
	 * ()方法,id=1&id=2&id=3形式参数对需重写getPostBody()方法，返回参数的Byte[]形式</br>
	 * 
	 * @param api
	 *            服务器api地址， 如www.example.com
	 * @param postContent
	 *            id=1&id=2&id=3形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void postWithVolley(String api, final String postContent,
			Response.Listener<String> listener) {
		stringRequest = new StringRequest(Method.POST, api, listener,
				new MyErrorListener()) {
			@Override
			public byte[] getPostBody() throws AuthFailureError {
				return postContent.toString().getBytes();
			}
		};
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应，异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param listener
	 *            响应成功回调
	 */
	public void postWithVolley(String api, final String name,
			final String value, Response.Listener<String> listener) {
		postContent = attachKeyAndVlaue(name, value);
		postWithVolley(api, postContent, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param params
	 *            Map<String, String>形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void postWithVolley(String api, final Map<String, String> params,
			Response.Listener<String> listener) {
		stringRequest = new StringRequest(Method.POST, api, listener,
				new MyErrorListener()) {
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				return params;
			}
		};
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应，异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param params
	 *            List<BasicNameValuePair> 形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void postWithVolley(String api,
			List<BasicNameValuePair> params,
			Response.Listener<String> listener) {
		Map<String, String> map = convertListUrlToMap(params);
		postWithVolley(api, map, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应，不传递参数，异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param url
	 *            完整服务器地址,包含参数对 如www.example.com?id=1&name=jack
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonGetWithVolley(String url,
			Response.Listener<JSONObject> listener) {
		jsonObjectRequest = new JsonObjectRequest(url, null, listener,
				new MyErrorListener());
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	};

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 不包含参数对 如www.example.com
	 * @param postContent
	 *            id=1&id=2&id=3形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonGetWithVolley(String api, String postContent,
			Response.Listener<JSONObject> listener) {
		path = attachHttpGetParam(api, postContent);
		jsonGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 不包含参数对 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonGetWithVolley(String api, String name, String value,
			Response.Listener<JSONObject> listener) {
		path = attachHttpGetParam(api, name, value);
		jsonGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 不包含参数对 如www.example.com
	 * @param params
	 *            List<BasicNameValuePair>形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonGetWithVolley(String api, List<BasicNameValuePair> params,
			Response.Listener<JSONObject> listener) {
		path = attachHttpGetParams(api, params);
		jsonGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 不包含参数对 如www.example.com
	 * @param params
	 *            Map<String, String> 形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonGetWithVolley(String api, Map<String, String> params,
			Response.Listener<JSONObject> listener) {
		path = attacHttpGetParams(api, params);
		jsonGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param postContent
	 *            id=1&id=2&id=3形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonPostWithVolley(String api, final String postContent,
			Response.Listener<JSONObject> listener) {
		jsonObjectRequest = new JsonObjectRequest(Method.POST, api, listener,
				new MyErrorListener()) {
			@Override
			public byte[] getPostBody() {
				return postContent.getBytes();
			}
		};
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonPostWithVolley(String api, String name, String value,
			Response.Listener<JSONObject> listener) {
		postContent = attachKeyAndVlaue(name, value);
		jsonPostWithVolley(api, postContent, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param listParams
	 *            List<BasicNameValuePair>形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonPostWithVolley(String api,
			List<BasicNameValuePair> listParams,
			Response.Listener<JSONObject> listener) {
		postContent = URLEncodedUtils.format(listParams, "UTF-8");
		jsonPostWithVolley(api, postContent, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param mapParams
	 *            Map<String, String>形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonPostWithVolley(String api,
			final Map<String, String> mapParams,
			Response.Listener<JSONObject> listener) {
		jsonObjectRequest = new JsonObjectRequest(Method.POST, api, listener,
				new MyErrorListener()) {
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				return mapParams;
			}
		};
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * 
	 * @param url
	 *            服务器地址包含参数对 如www.example.com?id=1&id=2&id=3
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonArrayGetWithVolley(String url,
			Response.Listener<JSONArray> listener) {
		jsonArrayRequest = new JsonArrayRequest(url, listener,
				new MyErrorListener());
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonArrayGetWithVolley(String url, String name, String value,
			Response.Listener<JSONArray> listener) {
		path = attachHttpGetParam(url, name, value);
		jsonArrayGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param postCotnent
	 *            id=1&id=2&id=3形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonArrayGetWithVolley(String url, String postCotnent,
			Response.Listener<JSONArray> listener) {
		path = attachHttpGetParam(url, postCotnent);
		jsonArrayGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param params
	 *            List<BasicNameValuePair>形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonArrayGetWithVolley(String url,
			List<BasicNameValuePair> params,
			Response.Listener<JSONArray> listener) {
		path = attachHttpGetParams(url, params);
		jsonArrayGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * 
	 * @param url
	 *            服务器地址 如www.example.com?id=1&id=2&id=3
	 * @param params
	 *            Map<String, String> 形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonArrayGetWithVolley(String url, Map<String, String> params,
			Response.Listener<JSONArray> listener) {
		path = attacHttpGetParams(url, params);
		jsonArrayGetWithVolley(path, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param postContent
	 *            id=1&id=2&id=3形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonArrayPostWithVolley(String api, final String postContent,
			Response.Listener<JSONArray> listener) {
		jsonArrayRequest = new JsonArrayRequest(Method.POST, api, listener,
				new MyErrorListener()) {
			@Override
			public byte[] getPostBody() {
				return postContent.getBytes();
			}
		};
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param listener
	 *            响应成功回调
	 * @param errorListener
	 *            响应失败回调,如不进行错误处理，可传值Null
	 */
	public void jsonArrayPostWithVolley(String api, String name, String value,
			Response.Listener<JSONArray> listener) {
		postContent = attachKeyAndVlaue(name, value);
		jsonArrayPostWithVolley(api, postContent, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param listParams
	 *            List<BasicNameValuePair>形式参数
	 * @param listener
	 *            响应成功回调
	 */
	public void jsonArrayPostWithVolley(String api,
			List<BasicNameValuePair> listParams,
			Response.Listener<JSONArray> listener) {
		postContent = URLEncodedUtils.format(listParams, "UTF-8");
		jsonArrayPostWithVolley(api, postContent, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * 
	 * @param api
	 *            服务器地址 如www.example.com
	 * @param mapParams
	 *            Map<String, String>形式参数
	 * @param listener
	 *            响应成功回调
	 * @param errorListener
	 *            响应失败回调,如不进行错误处理，可传值Null
	 */
	public void jsonArrayPostWithVolley(String api,
			Map<String, String> mapParams, Response.Listener<JSONArray> listener) {
		postContent = transMapToString(mapParams);
		jsonArrayPostWithVolley(api, postContent, listener);
	}

	/**
	 * 使用Volley从指定URL下载图片,返回Bitmap
	 * 
	 * @param url
	 *            图片地址
	 * @param listener
	 *            响应成功回调
	 */
	public void getBitmapWithVolley(String url,
			Response.Listener<Bitmap> listener) {
		imageRequest = new ImageRequest(url, listener, 0, 0, ScaleType.CENTER_INSIDE, Config.RGB_565,
				new MyErrorListener());
		imageRequest.setTag(context);
		mQueue.add(imageRequest);
	}

	/**
	 * 使用Volley从指定URL下载图片,并设置imageView显示该图片
	 * 
	 * @param url
	 *            图片地址
	 * @param imageView
	 *            需设置图片的ImageView
	 */
	public void getBitmapWithVolley(String url, final ImageView imageView) {
		imageRequest = new ImageRequest(url, new Listener<Bitmap>() {
			@Override
			public void onResponse(Bitmap arg0) {
				imageView.setImageBitmap(arg0);
			}
		}, 0, 0, ScaleType.CENTER_INSIDE, Config.RGB_565, new MyErrorListener());
		imageRequest.setTag(context);
		mQueue.add(imageRequest);
	}

	/**
	 * 使用Volley ImageLoader加载图片,需传递ImageListner对象,
	 * 可通过ImageLoader.getImageListener(ImageView view, int defaultImageResId,
	 * int errorImageResId) 获得volley ImageLoader类中静态方法返回的ImageListner变量,
	 * 该回调函数中会给view设置默认，错误，加载成功图片。 也可传递自己的ImageListener实现
	 * 
	 * @param url
	 *            图片地址
	 * @param listener
	 *            ImageListner对象,图片加载回调
	 */
	public void loadImageWithVolley(String url, ImageListener listener) {
		imageLoader.get(url, listener);
	}

	/**
	 * 使用Volley ImageLoader加载图片， 成功加载图片则通过imageView显示
	 * 
	 * @param url
	 *            图片地址
	 * @param imageView
	 *            需设置图片的ImageView对象
	 */
	public void loadImageWithVolley(String url, final ImageView imageView) {
		imageLoader.get(url, new ImageListener() {
			@Override
			public void onErrorResponse(VolleyError arg0) {
			
			}

			@Override
			public void onResponse(ImageContainer arg0, boolean arg1) {
				imageView.setImageBitmap(arg0.getBitmap());
			}
		});
	}

	/**
	 * 使用Volley ImageLoader加载图片， 成功加载图片则通过imageView显示,并指定大小
	 * 
	 * @param url
	 *            图片地址
	 * @param imageView
	 *            需设置图片的ImageView对象
	 * @param width
	 *            宽度
	 * @param height
	 *            高度
	 */
	public void loadImageWithVolley(String url, final ImageView imageView,
			int width, int height) {
		imageLoader.get(url, new ImageListener() {
			@Override
			public void onErrorResponse(VolleyError arg0) {
			
			}
			@Override
			public void onResponse(ImageContainer arg0, boolean arg1) {
				imageView.setImageBitmap(arg0.getBitmap());
			}
		}, width, height);
	}

	/**
	 * /** 使用Volley ImageLoader加载图片,需传递ImageListner对象, 并指定宽高.
	 * 可通过ImageLoader.getImageListener(ImageView view, int defaultImageResId,
	 * int errorImageResId) 获得volley ImageLoader类中静态方法返回的ImageListner变量,
	 * 该回调函数中会给view设置默认，错误，加载成功图片。 也可传递自己的ImageListener实现
	 * 
	 * @param url
	 *            图片地址
	 * @param listener
	 *            ImageListner对象,图片加载回调
	 * @param width
	 *            指定宽度
	 * @param height
	 *            指定高度
	 */
	public void loadImageWithVolley(String url, ImageListener listener,
			int width, int height) {
		imageLoader.get(url, listener, width, height);
	}

	/**
	 * 使用Volley ImageLoader加载图片,指定默认，加载失败图片
	 * 
	 * @param url
	 *            图片地址
	 * @param imageView
	 *            需加载图片ImageView对象
	 * @param defaultImageResId
	 *            默认图片
	 * @param errorImageResId
	 *            加载失败图片
	 */
	public void loadDefaultWithVolley(String url, ImageView imageView,
			int defaultImageResId, int errorImageResId) {
		imageListener = ImageLoader.getImageListener(imageView,
				defaultImageResId, errorImageResId);
		imageLoader.get(url, imageListener);
	}

	/**
	 * 使用Volley ImageLoader加载图片,指定默认，加载失败图片,同时指定宽高
	 * 
	 * @param url
	 *            图片地址
	 * @param imageView
	 *            需加载图片ImageView对象
	 * @param defaultImageResId
	 *            默认图片
	 * @param errorImageResId
	 *            加载失败图片
	 * @param width
	 *            宽度
	 * @param height
	 *            高度
	 */
	public void loadDefaultWithVolley(String url, ImageView imageView,
			int defaultImageResId, int errorImageResId, int width, int height) {
		imageListener = ImageLoader.getImageListener(imageView,
				defaultImageResId, errorImageResId);
		imageLoader.get(url, imageListener, width, height);
	}

	/**
	 * 使用NetWorkImageView加载图片，NetWorkImageView需在layout文件中定义
	 * @param url
	 *            图片地址
	 * @param networkImageView
	 *            NetWorkImageView控件
	 * @param defaultImageResId
	 *            默认加载图片
	 * @param errorImageResId
	 *            加载错误图片
	 */
	public void initNetWorkImageView(String url,
			NetworkImageView networkImageView, int defaultImageResId,
			int errorImageResId) {
		networkImageView.setDefaultImageResId(defaultImageResId);
		networkImageView.setErrorImageResId(errorImageResId);
		networkImageView.setImageUrl(url, imageLoader);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为XmlPullParser
	 * 
	 * @param url
	 *            图片地址
	 * @param listener
	 *            响应成功回调
	 */
	public void getXmlPullParserWithVolley(String url,
			Response.Listener<XmlPullParser> listener) {
		xmlRequest = new XMLRequest(url, listener, new MyErrorListener());
		xmlRequest.setTag(context);
		mQueue.add(xmlRequest);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com?id=1&id=2&id=3
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void getPojoWithVolley(String url, Class<T> clazz,
			Response.Listener<T> listener) {
		GsonRequest<T> gsonRequest = new GsonRequest<T>(url, clazz, listener,
				new MyErrorListener());
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com?id=1&id=2&id=3
	 * @param postConetnt
	 *            id=1&id=2&id=3形式参数
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void getPojoWithVolley(String url, String postConetnt,
			Class<T> clazz, Response.Listener<T> listener) {
		path = attachHttpGetParam(url, postConetnt);
		getPojoWithVolley(path, clazz, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void getPojoWithVolley(String url, String name, String value,
			Class<T> clazz, Response.Listener<T> listener) {
		path = attachHttpGetParam(url, name, value);
		getPojoWithVolley(path, clazz, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param params
	 *            List<BasicNameValuePair形式参数
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void getPojoWithVolley(String url,
			List<BasicNameValuePair> params, Class<T> clazz,
			Response.Listener<T> listener) {
		path = attachHttpGetParams(url, params);
		getPojoWithVolley(path, clazz, listener);
	}

	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com？id=1&id=2&id=3
	 * @param params
	 *            Map<String, String>形式参数
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void getPojoWithVolley(String url, Map<String, String> params,
			Class<T> clazz, Response.Listener<T> listener) {
		path = attacHttpGetParams(url, params);
		getPojoWithVolley(path, clazz, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param postContent
	 *            id=1&id=2&id=3形式参数
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void postWithVolley(String url, final String postContent,
			Class<T> clazz, Response.Listener<T> listener) {
		GsonRequest<T> gsonRequest = new GsonRequest<T>(Method.POST, url,
				clazz, listener, new MyErrorListener()) {
			@Override
			public byte[] getPostBody() throws AuthFailureError {
				return postContent.getBytes();
			}
		};
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param name
	 *            键
	 * @param value
	 *            值
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void postWithVolley(String url, String name, String value,
			Class<T> clazz, Response.Listener<T> listener) {
		postContent = attachHttpGetParam(name, value);
		postWithVolley(url, postContent, clazz, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param listParams
	 *            List<BasicNameValuePair>形式参数
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void postWithVolley(String url,
			List<BasicNameValuePair> listParams, Class<T> clazz,
			Response.Listener<T> listener) {
		postContent = URLEncodedUtils.format(listParams, "utf-8");
		postWithVolley(url, postContent, clazz, listener);
	}

	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * 
	 * @param url
	 *            服务器地址 如www.example.com
	 * @param mapParams
	 *            Map<String, String> 形式参数
	 * @param clazz
	 *            指定类的Class对象 通过如 People.class生成 或 people.getClass()
	 *            可通过clazz.newInstance得到对应类的对象
	 * @param listener
	 *            响应成功回调
	 */
	public <T> void postWithVolley(String url, Map<String, String> mapParams,
			Class<T> clazz, Response.Listener<T> listener) {
		postContent = transMapToString(mapParams);
		postWithVolley(url, postContent, clazz, listener);
	}

	/**
	 * note:不建议使用volley上传文件或图片，下面方法中UploadRequest引用了httpmime包实现文件上传，
	 * 该方式需要引入httpmime包,增大文件包 可改用通过android-async-http实现文件上传 使用volley上传文件
	 * 
	 * @param url
	 *            服务器地址
	 * @param file
	 *            文件
	 * @param listener
	 *            响应成功回调
	 */
	public void uploadFile(String url, File file,
			Response.Listener<String> listener) {
		uploadFile(url, file, null, listener);
	}

	/**
	 * 使用volley上传文件
	 * 
	 * @param url
	 *            服务器地址
	 * @param file
	 *            文件
	 * @param params
	 *            Map<String, String>形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void uploadFile(String url, File file, Map<String, String> params,
			Response.Listener<String> listener) {
		UploadRequest uploadRequest = new UploadRequest(url, file, params,
				listener, new MyErrorListener());
		uploadRequest.setTag(context);
		mQueue.add(uploadRequest);
	}

	/**
	 * 使用volley上传图片
	 * 
	 * @param url
	 *            服务器地址
	 * @param bitmap
	 *            图片
	 * @param listener
	 *            响应成功回调
	 */
	public void uploadBitmap(String url, Bitmap bitmap,
			Response.Listener<String> listener) {
		uploadBitmap(url, bitmap, null, listener);
	}

	/**
	 * 使用volley上传图片
	 * 
	 * @param url
	 *            服务器地址
	 * @param bitmap
	 *            图片
	 * @param params
	 *            Map<String, String>形式参数对
	 * @param listener
	 *            响应成功回调
	 */
	public void uploadBitmap(String url, Bitmap bitmap,
			Map<String, String> params, Response.Listener<String> listener) {
		UploadRequest uploadRequest = new UploadRequest(url, bitmap, params,
				listener, new MyErrorListener());
		uploadRequest.setTag(context);
		mQueue.add(uploadRequest);
	}

	// 自定义的网络异常回调
	public class MyErrorListener implements ErrorListener {
		@Override
		public void onErrorResponse(VolleyError arg0) {
			if (isShowNetworkErrorToast) {
				Toast.makeText(context, "网络异常, 请检查网络连接", Toast.LENGTH_SHORT)
						.show();
			}
		}
	}

	public static boolean isShowNetworkErrorToast() {
		return isShowNetworkErrorToast;
	}

	public static void setShowNetworkErrorToast(boolean is) {
		isShowNetworkErrorToast = is;
	}

	/**
	 * 转换List<BasicNameValuePair>参数为Map<String, String>参数
	 * 
	 * @param params
	 *            List<BasicNameValuePair>形式参数
	 * @return Map<String, String>参数
	 */
	public Map<String, String> convertListUrlToMap(
			List<BasicNameValuePair> params) {
		String param = URLEncodedUtils.format(params, "utf-8");
		Map<String, String> map = new LinkedHashMap<String, String>();
		String[] pairs = param.split("&");
		for (int i = 0; i < pairs.length; i++) {
			String[] keyAndValue = pairs[i].split("=");
			map.put(keyAndValue[0], keyAndValue[1]);
		}
		return map;
	}

	/**
	 * 转换Map<String, String>为string
	 * 
	 * @param Map
	 *            <String, String> 参数
	 * @return 转换后的String数据
	 */
	public String transMapToString(Map<String, String> map) {
		Entry<String, String> entry;
		StringBuilder sb = new StringBuilder();
		for (Iterator<Entry<String, String>> iterator = map.entrySet()
				.iterator(); iterator.hasNext();) {
			entry = iterator.next();
			sb.append(entry.getKey().toString())
					.append("=")
					.append(null == entry.getValue() ? "" : entry.getValue()
							.toString()).append(iterator.hasNext() ? "&" : "");
		}
		return sb.toString();
	}

	private final String CHARSET_NAME = "UTF-8";

	public String formatParams(List<BasicNameValuePair> params) {
		return URLEncodedUtils.format(params, CHARSET_NAME);
	}

	public String attacHttpGetParams(String url, Map<String, String> params) {
		return attachHttpGetParam(url, transMapToString(params));
	}

	public String attachHttpGetParams(String url,
			List<BasicNameValuePair> params) {
		return url + "?" + formatParams(params);
	}

	public String attachHttpGetParam(String url, String params) {
		return url + "?" + params;
	}

	public String attachHttpGetParam(String url, String name, String value) {
		return url + "?" + name + "=" + value;
	}

	public String attachKeyAndVlaue(String key, String value) {
		return key + "=" + value;
	}

	// 自定义XMLRequest 参考： volley github StringReqeust源码
	public static class XMLRequest extends Request<XmlPullParser> {

		private final Listener<XmlPullParser> mListener;

		public XMLRequest(int method, String url,
				Listener<XmlPullParser> listener, ErrorListener errorListener) {
			super(method, url, errorListener);
			mListener = listener;
		}

		public XMLRequest(String url, Listener<XmlPullParser> listener,
				ErrorListener errorListener) {
			this(Method.GET, url, listener, errorListener);
		}

		@Override
		protected Response<XmlPullParser> parseNetworkResponse(
				NetworkResponse response) {
			try {
				String xmlString = new String(response.data,
						HttpHeaderParser.parseCharset(response.headers));
				XmlPullParserFactory factory = XmlPullParserFactory
						.newInstance();
				XmlPullParser xmlPullParser = factory.newPullParser();
				xmlPullParser.setInput(new StringReader(xmlString));
				return Response.success(xmlPullParser,
						HttpHeaderParser.parseCacheHeaders(response));
			} catch (UnsupportedEncodingException e) {
				return Response.error(new ParseError(e));
			} catch (XmlPullParserException e) {
				return Response.error(new ParseError(e));
			}
		}

		@Override
		protected void deliverResponse(XmlPullParser response) {
			mListener.onResponse(response);
		}
	}

	// 自定义GsonRequest 参考： volley github StringReqeust源码
	public static class GsonRequest<T> extends Request<T> {

		private final Listener<T> mListener;
		private Gson mGson;

		private Class<T> mClass;

		public GsonRequest(int method, String url, Class<T> clazz,
				Listener<T> listener, ErrorListener errorListener) {
			super(method, url, errorListener);
			mGson = new Gson();
			mClass = clazz;
			mListener = listener;
		}

		public GsonRequest(String url, Class<T> clazz, Listener<T> listener,
				ErrorListener errorListener) {
			this(Method.GET, url, clazz, listener, errorListener);
		}

		/**
		 * 通过重写getPostBody()函数， 函数返回值即为post请求的参数
		 */
		@Override
		public byte[] getPostBody() throws AuthFailureError {
			return null;
		}

		@Override
		protected Response<T> parseNetworkResponse(NetworkResponse response) {
			try {
				String jsonString = new String(response.data,
						HttpHeaderParser.parseCharset(response.headers));
				return Response.success(mGson.fromJson(jsonString, mClass),
						HttpHeaderParser.parseCacheHeaders(response));
			} catch (UnsupportedEncodingException e) {
				return Response.error(new ParseError(e));
			}
		}

		@Override
		protected void deliverResponse(T response) {
			mListener.onResponse(response);
		}

	}

	// 自定义使用Okhttp作为volley传输层 ,需要引入okhttp, okhttp-urlconnection包
	// see:http://stackoverflow.com/questions/24375043/how-to-implement-android-volley-with-okhttp-2-0
	public static class OkHttpStack extends HurlStack {
		private final OkUrlFactory okUrlFactory;

		public OkHttpStack() {
			this(new OkUrlFactory(new OkHttpClient()));
		}

		public OkHttpStack(OkUrlFactory okUrlFactory) {
			if (okUrlFactory == null) {
				throw new NullPointerException("Client must not be null.");
			}
			this.okUrlFactory = okUrlFactory;
		}
		@Override
		protected HttpURLConnection createConnection(URL url)
				throws IOException {
			return okUrlFactory.open(url);
		}

	}
}
