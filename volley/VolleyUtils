package com.example.yueyundong1.util;
  
import java.io.File;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.widget.ImageView;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkResponse;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.VolleyError;
import com.android.volley.Request.Method;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.Response.ErrorListener;
import com.android.volley.Response.Listener;
import com.android.volley.toolbox.HttpHeaderParser;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.ImageLoader.ImageContainer;
import com.android.volley.toolbox.ImageLoader.ImageListener;
import com.android.volley.toolbox.ImageRequest;
import com.android.volley.toolbox.JsonArrayRequest;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.NetworkImageView;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;

/**Volley工具类,使用Volley访问网络，封装了各种常用功能，具体查看方法注释  需添加网络连接权限：<uses-permission android:name="android.permission.INTERNET" /> 
 * @author vagrant QQ:513302092
 * @date 创建时间: 2015年4月26日
 */
public class VolleyUtils {
	//请求队列
	private RequestQueue mQueue;
	//string类型请求
	private  StringRequest stringRequest;
	//返回结果为JSONObject类型的请求
	private  JsonObjectRequest jsonObjectRequest;
	//返回结果为JSONArray类型的请求
	private  JsonArrayRequest jsonArrayRequest;
	//定义Xml请求
	private XMLRequest xmlRequest;
	//返回结果为Bitmap类型的请求 
	private  ImageRequest imageRequest;
	//用于图片加载的ImageLoader对象
	private ImageLoader imageLoader;
	//ImageListener对象
	private ImageListener imageListener;
	//URL完整路径
	private  String path;
	private Context context;
	private static VolleyUtils mInstance;
	
	private VolleyUtils(Context context) {
		this.context = context;
		mQueue = getRequestQueue();
		imageLoader = new ImageLoader(mQueue, new VolleyImageCache());
		//default 
	}
	
	public static synchronized VolleyUtils getInstance(Context context) {
		if (mInstance == null) {
			mInstance = new VolleyUtils(context);
		}
		return mInstance;
	}
	
	public RequestQueue getRequestQueue() {
		if (mQueue == null) {
			mQueue = Volley.newRequestQueue(context.getApplicationContext());
		}
		return mQueue;
	}
	
	public ImageLoader getImageLoader() {
		return imageLoader;
	}
	
	public <T> void addToRequestQueue(Request<T> req) {
		getRequestQueue().add(req);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,不传递参数，调用相应回调接口返回结果，响应成功结果类型为String
	 * @param url 完整服务器地址,包含参数对 如www.example.com?id=1&name=jack
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void getWithVolley(String url, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		stringRequest = new StringRequest(url, listener, errorListener);
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * @param api 服务器地址,不包含参数对 如www.example.com
	 * @param postContent  id=1&id=2&id=3形式参数对
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void getWithVolley(String api, String postContent, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParam(api, postContent);
		stringRequest = new StringRequest(path, listener, errorListener);
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * @param api 服务器api地址，不包含参数对 如www.example.com
	 * @param name 键
	 * @param value 值
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void getWithVolley(String api, String name, String value, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParam(api, name, value);
		stringRequest = new StringRequest(path, listener, errorListener);
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * @param api 服务器api地址，不包含参数对 如www.example.com
	 * @param params List<BasicNameValuePair>形式参数
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void getWithVolley(String api, List<BasicNameValuePair> params, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParams(api, params);
		stringRequest = new StringRequest(path, listener, errorListener);
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * @param api 服务器api地址，不包含参数对 如www.example.com
	 * @param params Map<String, String>形式参数
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void getWithVolley(String api, Map<String, String> params, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		path = attacHttpGetParams(api, params);
		stringRequest = new StringRequest(path, listener, errorListener);
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	
	/**
	 * 使用Volley通过post方式从服务器得到响应，异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * 参考volley github上Request类源码：https://github.com/mcxiaoke/android-volley/blob/master/src/main/java/com/android/volley/Request.java
	 * 传递Map<String, String>类型参数需重写getParmas()方法,id=1&id=2&id=3形式参数对需重写getPostBody()方法，返回参数的Byte[]形式</br>
	 * @param api 服务器api地址， 如www.example.com
	 * @param postContent id=1&id=2&id=3形式参数对
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void postWithVolley(String api, final String postContent, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		stringRequest = new StringRequest(Method.POST, api, listener, errorListener) {
			@Override
			public byte[] getPostBody() throws AuthFailureError {
				return postContent.toString().getBytes();
			}
		};
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应，异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * @param api 服务器地址  如www.example.com
	 * @param name 键
	 * @param value 值
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void postWithVolley(String api, final String name, final String value, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		stringRequest = new StringRequest(Method.POST, api, listener, errorListener) {
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put(name, value);
				return map;
			}
		};
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	/**
	 *  使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * @param api 服务器地址  如www.example.com
	 * @param params Map<String, String>形式参数
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void postWithVolley(String api, final Map<String, String> params, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		stringRequest = new StringRequest(Method.POST, api, listener, errorListener) {
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				return params;
			}
		};
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应，异步执行,调用相应回调接口返回结果，响应成功结果类型为String
	 * @param api 服务器地址  如www.example.com
	 * @param params List<BasicNameValuePair> 形式参数
	 * @param listener 响应成功回调
	 * @param errorListener  响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void postWithVolley(String api, final List<BasicNameValuePair> params, Response.Listener<String> listener, Response.ErrorListener errorListener) {
		final Map<String, String> map = convertListUrlToMap(params);
		stringRequest = new StringRequest(Method.POST,api, listener, errorListener) {
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				return map;
			}
		};
		stringRequest.setTag(context);
		mQueue.add(stringRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应，不传递参数，异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param url 完整服务器地址,包含参数对 如www.example.com?id=1&name=jack
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonGetWithVolley(String url, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		jsonObjectRequest = new JsonObjectRequest(url, null, listener, errorListener);
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	};
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址 不包含参数对 如www.example.com
	 * @param postContent id=1&id=2&id=3形式参数对
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonGetWithVolley(String api, String postContent, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParam(api, postContent);
		jsonObjectRequest = new JsonObjectRequest(path, null, listener, errorListener);
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址 不包含参数对 如www.example.com
	 * @param name 键
	 * @param value 值
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonGetWithVolley(String api, String name, String value, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParam(api, name, value);
		jsonObjectRequest = new JsonObjectRequest(path, null, listener, errorListener);
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址 不包含参数对 如www.example.com
	 * @param params List<BasicNameValuePair>形式参数
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonGetWithVolley(String api, List<BasicNameValuePair> params, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParams(api, params);
		jsonObjectRequest = new JsonObjectRequest(path, null, listener, errorListener);
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址 不包含参数对 如www.example.com
	 * @param params Map<String, String> 形式参数
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonGetWithVolley(String api, Map<String, String> params, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		path = attacHttpGetParams(api, params);
		jsonObjectRequest = new JsonObjectRequest(path, null, listener, errorListener);
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址  如www.example.com
	 * @param postContent id=1&id=2&id=3形式参数对
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonPostWithVolley(String api, final String postContent, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		jsonObjectRequest = new JsonObjectRequest(api, null, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				// TODO Auto-generated method stub
				return postContent.getBytes();
			}
		};
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址  如www.example.com
	 * @param name 键
	 * @param value 值
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonPostWithVolley(String api, String name, String value, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		final String params = attachKeyAndVlaue(name, value);
		jsonObjectRequest = new JsonObjectRequest(api, null, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				return params.getBytes();
			}
		};
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址  如www.example.com
	 * @param listParams List<BasicNameValuePair>形式参数
	 * @param listener  响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonPostWithVolley(String api, List<BasicNameValuePair> listParams, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		final String params = URLEncodedUtils.format(listParams, "UTF-8");
		jsonObjectRequest = new JsonObjectRequest(api, null, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				return params.getBytes();
			}
		};
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONObject
	 * @param api 服务器地址  如www.example.com
	 * @param mapParams Map<String, String>形式参数
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonPostWithVolley(String api, Map<String, String> mapParams, Response.Listener<JSONObject> listener, Response.ErrorListener errorListener) {
		final String params = transMapToString(mapParams);
		jsonObjectRequest = new JsonObjectRequest(api, null, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				return params.getBytes();
			}
		};
		jsonObjectRequest.setTag(context);
		mQueue.add(jsonObjectRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * @param url 服务器地址包含参数对  如www.example.com?id=1&id=2&id=3
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayGetWithVolley(String url, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		jsonArrayRequest = new JsonArrayRequest(url, listener, errorListener);
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * @param url 服务器地址 如www.example.com
	 * @param name 键
	 * @param value 值
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayGetWithVolley(String url, String name, String value, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParam(url, name, value);
		jsonArrayRequest = new JsonArrayRequest(path, listener, errorListener);
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * @param url 服务器地址 如www.example.com
	 * @param postCotnent  id=1&id=2&id=3形式参数对
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayGetWithVolley(String url, String postCotnent, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParam(url, postCotnent);
		jsonArrayRequest = new JsonArrayRequest(path, listener, errorListener);
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * @param url 服务器地址 如www.example.com
	 * @param params List<BasicNameValuePair>形式参数对
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayGetWithVolley(String url, List<BasicNameValuePair> params, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		path = attachHttpGetParams(url, params);
		jsonArrayRequest = new JsonArrayRequest(path, listener, errorListener);
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray类型
	 * @param url 服务器地址 如www.example.com?id=1&id=2&id=3
	 * @param params Map<String, String> 形式参数对
	 * @param listener 响应成功回调 
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayGetWithVolley(String url, Map<String, String> params, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		path = attacHttpGetParams(url, params);
		jsonArrayRequest = new JsonArrayRequest(path, listener, errorListener);
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * @param api 服务器地址  如www.example.com
	 * @param postContent id=1&id=2&id=3形式参数对
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayPostWithVolley(String api, final String postContent, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		jsonArrayRequest = new JsonArrayRequest(api, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				return postContent.getBytes();
			}
		};
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * @param api 服务器地址  如www.example.com
	 * @param name 键
	 * @param value 值
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayPostWithVolley(String api, String name, String value, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		final String params = attachKeyAndVlaue(name, value);
		jsonArrayRequest = new JsonArrayRequest(api, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				return params.getBytes();
			}
		};
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * @param api 服务器地址  如www.example.com
	 * @param listParams List<BasicNameValuePair>形式参数
	 * @param listener  响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayPostWithVolley(String api, List<BasicNameValuePair> listParams, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		final String params = URLEncodedUtils.format(listParams, "UTF-8");
		jsonArrayRequest = new JsonArrayRequest(api, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				return params.getBytes();
			}
		};
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为JSONArray
	 * @param api 服务器地址  如www.example.com
	 * @param mapParams Map<String, String>形式参数
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void jsonArrayPostWithVolley(String api, Map<String, String> mapParams, Response.Listener<JSONArray> listener, Response.ErrorListener errorListener) {
		final String params = transMapToString(mapParams);
		jsonArrayRequest = new JsonArrayRequest(api, listener, errorListener) {
			@Override
			public byte[] getPostBody() {
				return params.getBytes();
			}
		};
		jsonArrayRequest.setTag(context);
		mQueue.add(jsonArrayRequest);
	}
	/**
	 * 使用Volley从指定URL下载图片,返回Bitmap
	 * @param url  图片地址
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public  void getBitmapWithVolley(String url, Response.Listener<Bitmap> listener, Response.ErrorListener errorListener) {
		imageRequest = new ImageRequest(url, listener, 0, 0, Config.RGB_565, errorListener);
		imageRequest.setTag(context);
		mQueue.add(imageRequest);
	}
	/**
	 * 使用Volley从指定URL下载图片,并设置imageView显示该图片
	 * @param url 图片地址
	 * @param imageView 需设置图片的ImageView
	 */
	public void getBitmapWithVolley(String url, final ImageView imageView) {
		imageRequest = new ImageRequest(url, new Listener<Bitmap>() {
			@Override
			public void onResponse(Bitmap arg0) {
				imageView.setImageBitmap(arg0);
			}
		}, 0, 0, Config.RGB_565, new ErrorListener() {
			@Override
			public void onErrorResponse(VolleyError arg0) {
			}
		});
		imageRequest.setTag(context);
		mQueue.add(imageRequest);
	}
	/**
	 * 使用Volley ImageLoader加载图片,需传递ImageListner对象, 可通过ImageLoader.getImageListener(ImageView view, int defaultImageResId, int errorImageResId)
	 * 获得volley ImageLoader类中静态方法返回的ImageListner变量, 该回调函数中会给view设置默认，错误，加载成功图片。 也可传递自己的ImageListener实现
	 * @param url 图片地址
	 * @param listener ImageListner对象,图片加载回调
	 */
	public  void loadImageWithVolley(String url, ImageListener listener) {
		imageLoader.get(url, listener);
	}
	/**
	 * 使用Volley ImageLoader加载图片， 成功加载图片则通过imageView显示
	 * @param url 图片地址
	 * @param imageView 需设置图片的ImageView对象
	 */
	public void loadImageWithVolley(String url, final ImageView imageView) {
		imageLoader.get(url, new ImageListener() {
			@Override
			public void onErrorResponse(VolleyError arg0) {
				
			}
			@Override
			public void onResponse(ImageContainer arg0, boolean arg1) {
				imageView.setImageBitmap(arg0.getBitmap());
			}
		});
	}
	/**
	 * 使用Volley ImageLoader加载图片， 成功加载图片则通过imageView显示,并指定大小
	 * @param url 图片地址
	 * @param imageView 需设置图片的ImageView对象
	 * @param width 宽度
	 * @param height 高度
	 */
	public void loadImageWithVolley(String url, final ImageView imageView, int width, int height) {
		imageLoader.get(url, new ImageListener() {
			@Override
			public void onErrorResponse(VolleyError arg0) {
				
			}
			@Override
			public void onResponse(ImageContainer arg0, boolean arg1) {
				imageView.setImageBitmap(arg0.getBitmap());
			}
		}, width, height);
	}
	/**
	/**
	 * 使用Volley ImageLoader加载图片,需传递ImageListner对象, 并指定宽高.  可通过ImageLoader.getImageListener(ImageView view, int defaultImageResId, int errorImageResId)
	 * 获得volley ImageLoader类中静态方法返回的ImageListner变量, 该回调函数中会给view设置默认，错误，加载成功图片。 也可传递自己的ImageListener实现
	 * @param url 图片地址
	 * @param listener ImageListner对象,图片加载回调
	 * @param width 指定宽度
	 * @param height 指定高度
	 */
	public void loadImageWithVolley(String url, ImageListener listener, int width, int height) {
		imageLoader.get(url, listener, width, height);
	}
	/**
	 * 使用Volley ImageLoader加载图片,指定默认，加载失败图片
	 * @param url 图片地址
	 * @param imageView 需加载图片ImageView对象
	 * @param defaultImageResId 默认图片
	 * @param errorImageResId 加载失败图片
	 */
	public void loadDefaultWithVolley(String url, ImageView imageView, int defaultImageResId, int errorImageResId) {
		imageListener = ImageLoader.getImageListener(imageView, defaultImageResId, errorImageResId);
		imageLoader.get(url, imageListener);
	}
	/**
	 * 使用Volley ImageLoader加载图片,指定默认，加载失败图片,同时指定宽高
	 * @param url 图片地址
	 * @param imageView 需加载图片ImageView对象
	 * @param defaultImageResId 默认图片
	 * @param errorImageResId 加载失败图片
	 * @param width 宽度
	 * @param height 高度
	 */
	public void loadDefaultWithVolley(String url, ImageView imageView, int defaultImageResId, int errorImageResId, int width, int height) {
		imageListener = ImageLoader.getImageListener(imageView, defaultImageResId, errorImageResId);
		imageLoader.get(url, imageListener, width, height);
	}
	/**
	 * 使用NetWorkImageView加载图片，NetWorkImageView需在layout文件中定义
	 * @param url 图片地址
	 * @param networkImageView NetWorkImageView控件
	 * @param defaultImageResId 默认加载图片
	 * @param errorImageResId 加载错误图片
	 */
	public void initNetWorkImageView(String url, NetworkImageView networkImageView, int defaultImageResId, int errorImageResId) {
		networkImageView.setDefaultImageResId(defaultImageResId);  
		networkImageView.setErrorImageResId(errorImageResId);  
		networkImageView.setImageUrl(url,imageLoader);  
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为XmlPullParser
	 * @param url 图片地址
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public void getXmlPullParserWithVolley(String url, Response.Listener<XmlPullParser> listener, Response.ErrorListener errorListener) {
		xmlRequest = new XMLRequest(url, listener, errorListener);
		xmlRequest.setTag(context);
		mQueue.add(xmlRequest);
	}
	/**
	 *  使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址 如www.example.com?id=1&id=2&id=3
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void getPojoWithVolley(String url, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		GsonRequest<T> gsonRequest = new GsonRequest<T>(url, clazz, listener, errorListener);
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com?id=1&id=2&id=3
	 * @param postConetnt  id=1&id=2&id=3形式参数
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void getPojoWithVolley(String url, String postConetnt, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		path = attachHttpGetParam(url, postConetnt);
		GsonRequest<T> gsonRequest = new GsonRequest<T>(path, clazz, listener, errorListener);
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com
	 * @param name 键
	 * @param value 值
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void getPojoWithVolley(String url, String name, String value, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		path = attachHttpGetParam(url, name, value);
		GsonRequest<T> gsonRequest = new  GsonRequest<T>(path, clazz, listener, errorListener);
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com
	 * @param params List<BasicNameValuePair形式参数
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */ 
	public <T> void getPojoWithVolley(String url, List<BasicNameValuePair> params, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		path = attachHttpGetParams(url, params);
		GsonRequest<T> gsonRequest = new GsonRequest<T>(path, clazz, listener, errorListener);
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过get方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com？id=1&id=2&id=3
	 * @param params Map<String, String>形式参数
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void getPojoWithVolley(String url, Map<String, String> params, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		path = attacHttpGetParams(url, params);
		GsonRequest<T> gsonRequest = new GsonRequest<T>(path, clazz, listener, errorListener);
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com
	 * @param postContent  id=1&id=2&id=3形式参数
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener  响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void postWithVolley(String url, final String postContent, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		GsonRequest<T> gsonRequest = new GsonRequest<T>(Method.POST, url, clazz, listener, errorListener) {
			@Override
			public byte[] getPostBody() throws AuthFailureError {
				return postContent.getBytes();
			}
			
		};
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com
	 * @param name 键
	 * @param value 值 
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void postWithVolley(String url, String name, String value, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		final String params = attachHttpGetParam(name, value);
		GsonRequest<T> gsonRequest = new GsonRequest<T>(Method.POST, url, clazz, listener, errorListener) {
			@Override
			public byte[] getPostBody() throws AuthFailureError {
				return params.getBytes();
			}
		};
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com
	 * @param listParams List<BasicNameValuePair>形式参数
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void postWithVolley(String url, List<BasicNameValuePair> listParams, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		final String params = URLEncodedUtils.format(listParams, "utf-8");
		GsonRequest<T> gsonRequest = new GsonRequest<T>(Method.POST, url, clazz, listener, errorListener) {
			@Override
			public byte[] getPostBody() throws AuthFailureError {
				return params.getBytes();
			}
		};
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	/**
	 * 使用Volley通过post方式从服务器得到响应,异步执行,调用相应回调接口返回结果，响应成功结果类型为T所指定类的对象
	 * @param url 服务器地址  如www.example.com
	 * @param mapParams Map<String, String> 形式参数
	 * @param clazz 指定类的Class对象 通过如 People.class生成 或 people.getClass() 可通过clazz.newInstance得到对应类的对象
	 * @param listener 响应成功回调
	 * @param errorListener 响应失败回调,如不进行错误处理，可传值Null
	 */
	public <T> void postWithVolley(String url, Map<String, String> mapParams, Class<T> clazz, Response.Listener<T> listener, ErrorListener errorListener) {
		final String params = transMapToString(mapParams);
		GsonRequest<T> gsonRequest = new GsonRequest<T>(Method.POST, url, clazz, listener, errorListener) {
			@Override
			public byte[] getPostBody() throws AuthFailureError {
				return params.getBytes();
			}
		};
		gsonRequest.setTag(context);
		mQueue.add(gsonRequest);
	}
	public void cancelRequest(Context context) {
		mQueue.cancelAll(context);
	}
	public void stopRequestQueue() {
		mQueue.stop();
	}
	public File getCacheDir() {
		File cacheDir = new File(context.getCacheDir(), "volley");
		return cacheDir;
	}
	/**
	 * 转换List<BasicNameValuePair>参数为Map<String, String>参数
	 * @param params List<BasicNameValuePair>形式参数
	 * @return Map<String, String>参数
	 */
	public  Map<String, String> convertListUrlToMap(List<BasicNameValuePair> params) {
		String param = URLEncodedUtils.format(params, "utf-8");
		Map<String, String> map = new LinkedHashMap<String, String>();
		String[] pairs = param.split("&");
		for (int i = 0 ; i < pairs.length; i++) {
			String[] keyAndValue = pairs[i].split("=");
			map.put(keyAndValue[0], keyAndValue[1]);
		}
		return map;
	}
	/**
	 * 转换Map<String, String>为string
	 * @param Map<String, String> 参数
	 * @return 转换后的String数据
	 */
	public  String transMapToString(Map<String, String> map) {
		Entry<String, String> entry;
		StringBuilder sb = new StringBuilder();
		for (Iterator<Entry<String, String>> iterator = map.entrySet().iterator(); iterator.hasNext();) {
			entry = iterator.next();
			 sb.append(entry.getKey().toString()).append( "=" ).append(null==entry.getValue()?"":  
			      entry.getValue().toString()).append (iterator.hasNext() ? "&" : ""); 
		}
		return sb.toString();
	}
	
	private  final String CHARSET_NAME = "UTF-8";

	public  String formatParams(List<BasicNameValuePair> params) {
		return URLEncodedUtils.format(params, CHARSET_NAME);
	}
	public  String attacHttpGetParams(String url, Map<String, String> params) {
		return attachHttpGetParam(url, transMapToString(params));
	}
	public  String attachHttpGetParams(String url,
			List<BasicNameValuePair> params) {
		return url + "?" + formatParams(params);
	}
	public  String attachHttpGetParam(String url, String params) {
		return url + "?" + params;
	}
	public  String attachHttpGetParam(String url, String name,
			String value) {
		return url + "?" + name + "=" + value;
	}
	public  String attachKeyAndVlaue(String key, String value) {
		return key + "=" + value;
	}
	
	
	//自定义XMLRequest 参考： volley github StringReqeust源码
	public static class XMLRequest extends Request<XmlPullParser> {  
		  
	    private final Listener<XmlPullParser> mListener;  
	  
	    public XMLRequest(int method, String url, Listener<XmlPullParser> listener,  
	            ErrorListener errorListener) {  
	        super(method, url, errorListener);  
	        mListener = listener;  
	    }  
	    public XMLRequest(String url, Listener<XmlPullParser> listener, ErrorListener errorListener) {  
	        this(Method.GET, url, listener, errorListener);  
	    }  
	    @Override  
	    protected Response<XmlPullParser> parseNetworkResponse(NetworkResponse response) {  
	        try {  
	            String xmlString = new String(response.data,  
	                    HttpHeaderParser.parseCharset(response.headers));  
	            XmlPullParserFactory factory = XmlPullParserFactory.newInstance();  
	            XmlPullParser xmlPullParser = factory.newPullParser();  
	            xmlPullParser.setInput(new StringReader(xmlString));  
	            return Response.success(xmlPullParser, HttpHeaderParser.parseCacheHeaders(response));  
	        } catch (UnsupportedEncodingException e) {  
	            return Response.error(new ParseError(e));  
	        } catch (XmlPullParserException e) {  
	            return Response.error(new ParseError(e));  
	        }  
	    }  
	    @Override  
	    protected void deliverResponse(XmlPullParser response) {  
	        mListener.onResponse(response);  
	    }  
	}  
}
