package com.example.yueyundong1.util;

import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;

import com.google.gson.Gson;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;

/**
 * Gson工具类 参考：http://blog.csdn.net/lk_blog/article/details/7685190
 * @author vagrant QQ:513302092
 * @date 创建时间: 2015年4月27日
 */
public class GsonUtils {
	private static Gson gson;
	static {
		gson = new Gson();
	}

	public static <T> String pojoToJson(T t) {
		return gson.toJson(t);
	}

	public static <T> T jsonStringToPojo(String json, Class<T> clazz) {
		T t = null;
		try {
			t = gson.fromJson(json, clazz);
			return t;
		} catch (JsonParseException e) {
			e.printStackTrace();
		}
		return t;
	}

	public static <T> T jsonObjectToPojo(JSONObject json, Class<T> clazz) {
		String jsonString = json.toString();
		T t = null;
		try {
			t = gson.fromJson(jsonString, clazz);
			return t;
		} catch (JsonParseException e) {
			e.printStackTrace();
		}
		return t;
	}

	public static <T> String listPojoToJson(List<T> t) {
		return gson.toJson(t);
	}
	
	public static <T> List<T> jsonStringToListPojo(String json, Class<T> clazz) {
		List<T> list = null;
		try {
			list = gson.fromJson(json, new TypeToken<List<T>>() {
			}.getType());
			return list;
		} catch (JsonParseException e) {
			e.printStackTrace();
		}
		return list;
	}
	
	public static <T> List<T> jsonObjectToListPojo(JSONObject json, Class<T> clazz) {
		String jsonString = json.toString();
		List<T> list = null;
		try {
			list = gson.fromJson(jsonString, new TypeToken<List<T>>() {
			}.getType());
			return list;
		} catch (JsonParseException e) {
			e.printStackTrace();
		}
		return list;
	}

	public static <K, V> String mapPojoToJson(Map<K, V> map) {
		return gson.toJson(map);
	}
	
	public static <K, V> Map<K, V> jsonStringToMapPojo(String json, Class<K> clazzK,
			Class<V> clazzV) {
		Type mapType = new TypeToken<Map<K, V>>() {
		}.getType();
		Map<K, V> map = null;
		try {
			gson.fromJson(json, mapType);
		} catch (JsonParseException e) {
			e.printStackTrace();
		}
		return map;
	}
	
	public static <K, V> Map<K, V> jsonObjectToMapPojo(JSONObject json, Class<K> clazzK, Class<V> clazzV) {
		String jsonString = json.toString();
		Type mapType = new TypeToken<Map<K, V>>() {
		}.getType();
		Map<K, V> map = null;
		try {
			gson.fromJson(jsonString, mapType);
		} catch (JsonParseException e) { 
			e.printStackTrace();
		}
		return map;
	}
}
